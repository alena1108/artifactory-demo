# Default values for artifactory.
# This is a YAML-formatted file.

# Beware when changing values here. You should know what you are doing!
# Access the values with {{ .Values.key.subkey }}

# Common
initContainerImage: "alpine:3.6"

# For supporting pulling from private registries
imagePullSecrets:

ingress:
  enabled: false
  # Used to create an Ingress record.
  hosts:
    - artifactory.domain.example
  annotations:
  # kubernetes.io/ingress.class: nginx
  # kubernetes.io/tls-acme: "true"
  tls:
  # Secrets must be manually created in the namespace.
  # - secretName: chart-example-tls
  #   hosts:
  #     - artifactory.domain.example

# Artifactory
artifactory:
  name: artifactory
  replicaCount: 1
  newInitPassword: rancher
  licenses: "cHJvZHVjdHM6CiAgYXJ0aWZhY3Rvcnk6CiAgICBwcm9kdWN0OiBaWGh3YVhKbGN6b2dNakF4T0Mwd05TMHhORlF3TURvd01Eb3dNRm9LYVdRNklHUmtZVFE0WlRKakxUaGxabU10TkRreE5TMWlObU00TFdNMFpHTmpObU0zWmpRMU9BcHZkMjVsY2pvZ1VtRnVZMmhsY2lCTVlXSnpDbkJ5YjNCbGNuUnBaWE02SUh0OUNuTnBaMjVoZEhWeVpUb2diblZzYkFwMGNtbGhiRG9nZEhKMVpRcDBlWEJsT2lCVVVrbEJUQXAyWVd4cFpFWnliMjA2SURJd01UZ3RNREl0TVRSVU1UTTZOVGs2TWpJdU1qRXdXZ289CiAgICBzaWduYXR1cmU6IGRSekhmdGd3SFBFVXprTW9ldy9JVVRpSGV3M1hvN24zalpoMXpTYlJqY1dqcmduVDM3dVYzRnVzVHJHOVR1TWFXcDhvcjFJREF0ay9WaXFqOS9hTk9MY2NCWmZJdGhtZ0dyakpseElkZXdxdVhqdGVsVDJrSEtlUmdSd1RveTNnMTRXaXFNVnRhZFVPdWhEY1MrNnR1ay9Kb2pYUlNxSjZmT09EV1JEZUphSHpNbVRaWVhvT2ZOZEo3T1FoMTNvSHBhdEU1Y2QwSWVMZnMzZDg3Y0xXWmpJNnVtaXptSjEvM0IrYjB2SmdsNisvS01Cc3hvV3pKT0R0djh1Q1NSQzRFamdhdFdBSjlFUStodWN6WDlpU1U4aHJBVlVJNk1FZGtZY20xWHhqVEs0L2ZJVmlZNzFJU0NKQnliK3ZTZkVSRk9lWEpEMm5SL1hjVXowaTJadFpUdz09CnZlcnNpb246IDEK"
  image:
    # repository: "docker.bintray.io/jfrog/artifactory-oss"
    repository: "docker.bintray.io/jfrog/artifactory-pro"
    version: 5.10.1
    pullPolicy: IfNotPresent
  service:
    name: artifactory
    type: ClusterIP
    annotations: {}
  externalPort: 8081
  internalPort: 8081
  persistence:
    mountPath: "/var/opt/jfrog/artifactory"
    enabled: true
    ## A manually managed Persistent Volume and Claim
    ## Requires persistence.enabled: true
    ## If defined, PVC must be created manually before volume will be bound
    # existingClaim:

    accessMode: ReadWriteOnce
    size: 20Gi
    ## artifactory data Persistent Volume Storage Class
    ## If defined, storageClassName: <storageClass>
    ## If set to "-", storageClassName: "", which disables dynamic provisioning
    ## If undefined (the default) or set to null, no storageClassName spec is
    ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
    ##   GKE, AWS & OpenStack)
    ##
    # storageClass: "-"
  ## Uncomment the following resources definitions or pass them from command line
  ## to control the cpu and memory resources allocated by the Kubernetes cluster
  resources: {}
  #  requests:
  #    memory: "1Gi"
  #    cpu: "500m"
  #  limits:
  #    memory: "2Gi"
  #    cpu: "1"
  ## The following Java options are passed to the java process running Artifactory.
  ## You should set them according to the resources set above
  javaOpts: {}
  #  xms: "1g"
  #  xmx: "2g"
  #  other: ""

# Nginx
nginx:
  enabled: true
  name: nginx
  replicaCount: 1
  image:
    repository: "docker.bintray.io/jfrog/nginx-artifactory-pro"
    version: 5.10.1
    pullPolicy: IfNotPresent
  service:
    ## For minikube, set this to NodePort, elsewhere use LoadBalancer
    type: LoadBalancer
    ## For supporting whitelist on the Nginx LoadBalancer service
    ## Set this to a list of IP CIDR ranges
    ## Example: loadBalancerSourceRanges: ['10.10.10.5/32', '10.11.10.5/32']
    ## or pass from helm command line
    ## Example: helm install ... --set nginx.service.loadBalancerSourceRanges='{10.10.10.5/32,10.11.10.5/32}'
    loadBalancerSourceRanges: []
    annotations: {}
    ## Provide static ip address
    loadBalancerIP:
  externalPortHttp: 80
  internalPortHttp: 80
  externalPortHttps: 443
  internalPortHttps: 443
  ## The SSL secret that will be used by the Nginx pod
  # tlsSecretName: chart-example-tls
  env:
#    artUrl: "http://artifactory:8081/artifactory"
    ssl: true
  persistence:
    mountPath: "/var/opt/jfrog/nginx"
    enabled: false
    ## A manually managed Persistent Volume and Claim
    ## Requires persistence.enabled: true
    ## If defined, PVC must be created manually before volume will be bound
    # existingClaim:

    accessMode: ReadWriteOnce
    size: 5Gi
    ## nginx data Persistent Volume Storage Class
    ## If defined, storageClassName: <storageClass>
    ## If set to "-", storageClassName: "", which disables dynamic provisioning
    ## If undefined (the default) or set to null, no storageClassName spec is
    ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
    ##   GKE, AWS & OpenStack)
    ##
    # storageClass: "-"
  resources: {}
  #  requests:
  #    memory: "250Mi"
  #    cpu: "100m"
  #  limits:
  #    memory: "250Mi"
  #    cpu: "500m"

## Configuration values for the postgresql dependency
## ref: https://github.com/kubernetes/charts/blob/master/stable/postgressql/README.md
##
postgresql:
  postgresUser: "artifactory"
  postgresPassword: "artifactory"
  postgresDatabase: "artifactory"
  persistence:
    enabled: true
  service:
    port: 5432
